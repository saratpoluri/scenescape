#!/bin/bash

# SPDX-FileCopyrightText: (C) 2023 - 2025 Intel Corporation
# SPDX-License-Identifier: LicenseRef-Intel-Edge-Software
# This file is licensed under the Limited Edge Software Distribution License Agreement.

# How to run:
#
# 1. Run the Cameras and Streams described in video_sources.cfg (see SOURCES_CONFIG_FILE)
#   (No arguments)
# make -C tests percebro-video-sources
#
# 2. Run a specific webcam (This will look in /sys/class/video4linux to match the name/device)
#   (Argument in VIDEO_SOURCES env variable)
# make -C tests percebro-video-sources VIDEO_SOURCES="C922 435"
#
# 3. Run a pipeline (can be rtsp or http)
# make -C tests percebro-video-sources VIDEO_SOURCES=rtsp://<host>/stream
#
# Note that you can also run this script independently, and give more than one argument:
#  (This will find and run C922 and 435 webcams)
# tests/percebro/tc_video_sources C922 435

TEST_NAME="NEX-T10445"
echo "Executing : ${TEST_NAME}"

SOURCES_CONFIG_FILE=/share/SceneScape/video_sources.cfg

TEST_RESULT=1
NUM_FRAMES=50

MODELDIR=/opt/intel/openvino/deployment_tools/intel_models
ARG_SOURCES=()
VIDEO_SOURCES=()

if [[ $# -ne 0 && -n "$1" ]]
then
  while (( "$#" ))
  do
    ARG_SOURCES+=( "$1" )
    shift 1
  done
else
  echo "Trying defaults from ${SOURCES_CONFIG_FILE}"

  while read -r line;
  do
    CHECKED_LINE=$( echo $line | grep -v '^#' )
    if [[ -z ${CHECKED_LINE} ]]; then
      continue
    fi
    ARG_SOURCES+=( "${line}" )
  done < ${SOURCES_CONFIG_FILE}
fi

for arg_num in ${!ARG_SOURCES[@]}
do
  arg=${ARG_SOURCES[$arg_num]}
  FOUND=0
  if [[ -n $(echo $arg | egrep '^[a-z]+://') ]]
  then
    FOUND=1
    VIDEO_SOURCES+=( "$arg" )
  else
    for v in /dev/video*
    do
      USB_DEVICE_NAME=""
      vid=$(echo $v | sed -e 's@/dev/video@@g')
      if [[ -f /sys/class/video4linux/video${vid}/device/interface ]]
      then
        USB_DEVICE_NAME=$(cat /sys/class/video4linux/video${vid}/device/interface | grep ${arg})
      else
        USB_DEVICE_NAME=$(cat /sys/class/video4linux/video${vid}/name | grep ${arg})
      fi

      if [[ "${USB_DEVICE_NAME}" != "" ]]
      then
        echo "Camera of type ${arg} is found at /dev/video${vid}"
        VIDEO_SOURCES+=( ${vid} )
        FOUND=1
        break
      fi
    done
  fi

  if [[ $FOUND -eq 0 ]]
  then
    if [[ -f "${arg}" ]]
    then
      echo "Adding file ${arg}"
      VIDEO_SOURCES+=( ${arg} )
    else
      echo "Failed finding source for ${arg}! Aborting"
      exit 1
    fi
  fi

done

# If we did find sources plugged in, then run the test with them.
if [[ ${#VIDEO_SOURCES[@]} -gt 0 ]]
then
  for src_num in ${!VIDEO_SOURCES[@]}
  do
    SOURCE=${VIDEO_SOURCES[$src_num]}

    echo "Running on source \"${SOURCE}\""
    docker run --privileged -v ${PWD}:/workspace --tty \
         -v ${PWD}/model_installer/models:${MODELDIR} \
         scenescape:latest \
         tests/percebro_tests/tc_run_source "${SOURCE}"
    RESULT=$?

    if [[ ${RESULT} -ne 0 ]]
    then
      echo "Test for video source \"${SOURCE}\" failed"
      TEST_RESULT=1
      break
    else
      echo "Test for video source \"${SOURCE}\" OK!"
      TEST_RESULT=0
    fi

    # Expect resolution request to work
    EXPECTED_RESULT=pass
    # Unless it is a stream.
    if [[ -n $(echo $SOURCE | egrep '[a-z]+://') ]]
    then
      echo "Expecting resolution request to FAIL"
      EXPECTED_RESULT=fail
    fi

    echo "Running on source \"${SOURCE}\" - updating resolution."
    ARGS="--resolution=1280x720"
    docker run --privileged -v ${PWD}:/workspace --tty \
         -v ${PWD}/model_installer/models:${MODELDIR} \
         -e EXTRA_ARGS="${ARGS}" \
         scenescape:latest \
         tests/percebro_tests/tc_run_source "${SOURCE}"
    RESULT=$?

    if [[ ${RESULT} -eq 0 && "${EXPECTED_RESULT}" == "fail" \
        || ${RESULT} -ne 0 && "${EXPECTED_RESULT}" == "pass" ]]
    then
      echo "Test for video source \"${SOURCE}\" failed - got ${RESULT} expected ${EXPECTED_RESULT}"
      TEST_RESULT=1
      break
    else
      echo "Test for video source \"${SOURCE}\" OK!"
      TEST_RESULT=0
    fi
  done
else
  echo "No cameras or sources found for test!"
  TEST_RESULT=1
fi

if [[ ${TEST_RESULT} -eq 0 ]]
then
  echo "${TEST_NAME}: PASS"
else
  echo "${TEST_NAME}: FAIL"
fi
