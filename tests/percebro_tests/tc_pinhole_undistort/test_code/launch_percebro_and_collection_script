#!/bin/bash

# SPDX-FileCopyrightText: (C) 2024 - 2025 Intel Corporation
# SPDX-License-Identifier: LicenseRef-Intel-Edge-Software
# This file is licensed under the Limited Edge Software Distribution License Agreement.

run_test_case() {
    local DATASET_DIR=$1
    local INTRINSICS=$2
    local DISTORTION=$3
    local UNDISTORT_FLAG=$4
    local OUTPUT_DIR=$5

    mkdir -p $OUTPUT_DIR
    # Remove if exists
    rm -f $OUTPUT_DIR/errors.json
    touch $OUTPUT_DIR/errors.json
    for i in $(ls $DATASET_DIR/distorted/*.jpg); do
        CAMERA_ID=$(basename $i .jpg)
        echo "Collecting image"
        python tests/percebro_tests/tc_pinhole_undistort/test_code/receive_image_and_calculate_error.py --original_image_file $DATASET_DIR/original/${CAMERA_ID}.jpg --output_image_file $OUTPUT_DIR/${CAMERA_ID}.jpg --output_json_file $OUTPUT_DIR/errors.json --camera_name ${CAMERA_ID} &

        collection_pid=$!

        if [ $UNDISTORT_FLAG = true ]; then
            percebro/percebro -i ${i} --mqttid ${CAMERA_ID} --intrinsics=${INTRINSICS} --distortion=${DISTORTION} --frames 20 -m retail --threshold 0.99 --ntp=ntpserv --auth=/run/secrets/percebro.auth broker.scenescape.intel.com
        else
            percebro/percebro -i ${i} --mqttid ${CAMERA_ID} --intrinsics=${INTRINSICS} --frames 20  -m retail --threshold 0.99 --ntp=ntpserv --auth=/run/secrets/percebro.auth broker.scenescape.intel.com
        fi

        wait $collection_pid
    done
}

DATASET_DIR="tests/percebro_tests/tc_pinhole_undistort/distortion_dataset/Set_1"
INTRINSICS=$(cat $DATASET_DIR/intrinsics.json)

DISTORTION=$(cat $DATASET_DIR/distortion.json)
UNDISTORT_FLAG=true
OUTPUT_DIR="test_data/tc_pinhole_undistort/distortion_dataset/Set_1/percebro_output_undistorted/"

run_test_case "$DATASET_DIR" "$INTRINSICS" "$DISTORTION" "$UNDISTORT_FLAG" "$OUTPUT_DIR"

python tests/percebro_tests/tc_pinhole_undistort/test_code/compare_errors.py --recalculated_error_file $OUTPUT_DIR/errors.json --expected_error_file $DATASET_DIR/undistorted_using_source_errors.json --compare_mse --compare_reprojection_error

TEST_RESULT_FIVE_DISTORTION_COEFFICIENTS=$?

# Remove all jpg files from the output directory
rm -f ${OUTPUT_DIR}/*.jpg

sleep 5

DISTORTION=$(cat $DATASET_DIR/distortion_k1.json)
OUTPUT_DIR="test_data/tc_pinhole_undistort/distortion_dataset/Set_1/percebro_output_undistorted_using_k1/"

run_test_case "$DATASET_DIR" "$INTRINSICS" "$DISTORTION" "$UNDISTORT_FLAG" "$OUTPUT_DIR"

python tests/percebro_tests/tc_pinhole_undistort/test_code/compare_errors.py --recalculated_error_file $OUTPUT_DIR/errors.json --expected_error_file $DATASET_DIR/undistorted_using_only_k1_errors.json --compare_mse --compare_reprojection_error

TEST_RESULT_ONE_DISTORTION_COEFFICIENT=$?

rm -f ${OUTPUT_DIR}/*.jpg

sleep 5

UNDISTORT_FLAG=false
OUTPUT_DIR="test_data/tc_pinhole_undistort/distortion_dataset/Set_1/percebro_output_not_undistorted/"

run_test_case "$DATASET_DIR" "$INTRINSICS" "$DISTORTION" "$UNDISTORT_FLAG" "$OUTPUT_DIR"

python tests/percebro_tests/tc_pinhole_undistort/test_code/compare_errors.py --recalculated_error_file $OUTPUT_DIR/errors.json --expected_error_file $DATASET_DIR/not_undistorted_errors.json --compare_mse --compare_reprojection_error

TEST_RESULT_NO_DISTORTION_COEFFICIENT=$?

rm -f ${OUTPUT_DIR}/*.jpg


TEST_STATUS=1

if [ $TEST_RESULT_FIVE_DISTORTION_COEFFICIENTS -eq 0 ] && [ $TEST_RESULT_ONE_DISTORTION_COEFFICIENT -eq 0 ] && [ $TEST_RESULT_NO_DISTORTION_COEFFICIENT -eq 0 ]; then
    TEST_STATUS=0
    echo "Test Passed"
else
    echo "Test Failed"
fi

exit $TEST_STATUS
