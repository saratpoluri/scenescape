#!/bin/bash

# SPDX-FileCopyrightText: (C) 2023 - 2025 Intel Corporation
# SPDX-License-Identifier: LicenseRef-Intel-Edge-Software
# This file is licensed under the Limited Edge Software Distribution License Agreement.

CARD=${1:-0}

if [[ ! -c /dev/dri/card${CARD} ]]
then
  echo "Error! Card ${CARD} doesnt exist"
  exit 1
fi

CAPTURE_PID=0
MEASURE_COLUMN_VIDEO=14
MEASURE_COLUMN_INFERENCE=9

function get_offsets()
{
  TYPE=$1
  # Problem: each of the cards might have different number of columns reported by intel_gpu_top
  COLS=$( cat tmp_${CARD}.txt | head -n 1 )
  NCOLS=1
  TARGET_COLS=""
  for c in $COLS
  do
    case $c in
      RCS/0)
        if [[ $TYPE == "INFERENCE" ]]
        then
          TARGET_COLS="$TARGET_COLS $NCOLS"
        fi
        NCOLS=$(( $NCOLS + 3 ))
        ;;
      BCS/0)
        NCOLS=$(( $NCOLS + 3 ))
        ;;
      VCS/0)
        if [[ $TYPE == "VIDEO" ]]
        then
          TARGET_COLS="$TARGET_COLS $NCOLS"
        fi
        NCOLS=$(( $NCOLS + 3 ))
        ;;
      VCS/1)
        if [[ $TYPE == "VIDEO" ]]
        then
          TARGET_COLS="$TARGET_COLS $NCOLS"
        fi
        NCOLS=$(( $NCOLS + 3 ))
        ;;
      VECS/0)
        if [[ $TYPE == "VIDEO" ]]
        then
          TARGET_COLS="$TARGET_COLS $NCOLS"
        fi
        NCOLS=$(( $NCOLS + 3 ))
        ;;
      VECS/1)
        if [[ $TYPE == "VIDEO" ]]
        then
          TARGET_COLS="$TARGET_COLS $NCOLS"
        fi
        NCOLS=$(( $NCOLS + 3 ))
        ;;
      UNKN/0)
        if [[ $TYPE == "INFERENCE" ]]
        then
          TARGET_COLS="$TARGET_COLS $NCOLS"
        fi
        NCOLS=$(( $NCOLS + 3 ))
        ;;
      UNKN/1)
        NCOLS=$(( $NCOLS + 3 ))
        ;;
      UNKN/2)
        NCOLS=$(( $NCOLS + 3 ))
        ;;
      UNKN/3)
        NCOLS=$(( $NCOLS + 3 ))
        ;;
      *)
        NCOLS=$(( $NCOLS + 1 ))
        ;;
    esac
  done

  echo "${TARGET_COLS}"
}

function start_measuring_gpu()
{
  intel_gpu_top -o tmp_${CARD}.txt -d drm:/dev/dri/card${CARD} &
  CAPTURE_PID=$!
}

function end_measuring_gpu()
{
  if [[ $CAPTURE_PID -ne 0 ]]; then
    kill $CAPTURE_PID
  fi
  if [[ ! -f tmp_${CARD}.txt ]]
  then
    echo "No tmp_${CARD} file! WHY?"
    exit 1
  fi
  # This gets the offsets from the intel_gpu_tool report that we might be interested in.
  OFFSETS_VIDEO=$( get_offsets "VIDEO" )
  OFFSETS_INFERENCE=$( get_offsets "INFERENCE" )

  NUM_ENTRIES=$( cat tmp_${CARD}.txt | tail -n +3 | wc -l )

  ## Tool reports some rows as 0s, got to find when test starts.
  VALS_FREQ=$( cat tmp_${CARD}.txt | tail -n +3 | awk "{print $1}" )
  IGNORE_LINES=3
  for val in $VALS_FREQ
  do
    if [[ $val -eq 0 ]]
    then
      IGNORE_LINES=$(( $IGNORE_LINES + 2 ))
      NUM_ENTRIES=$(( $NUM_ENTRIES - 2 ))
    else
      break
    fi
  done
  ## Tool reports first active row with high usage, so ignoring first line for averaging.
  NUM_ENTRIES=$(( $NUM_ENTRIES - 1 ))

  # Get the total sum from the VIDEO columns
  VIDEO_USE=0
  for c in $OFFSETS_VIDEO
  do
    VALS_VIDEO=$( cat tmp_${CARD}.txt | tail -n +${IGNORE_LINES} | awk "{print \$${c} }" )
    for val in $VALS_VIDEO; do
      VIDEO_USE=$( echo "$VIDEO_USE $val" | awk '{sum=$1 + $2;} END{print sum;}' )
    done
  done

  # Get the total sum from the INFERENCE columns
  INFERENCE_USE=0
  for c in $OFFSETS_INFERENCE
  do
    VALS_INFERENCE=$( cat tmp_${CARD}.txt | tail -n +${IGNORE_LINES} | awk "{print \$${c} }" )
    for val in $VALS_INFERENCE; do
      INFERENCE_USE=$( echo "$INFERENCE_USE $val" | awk '{sum=$1 + $2;} END{print sum;}' )
    done
  done

  # Get the Average
  if [[ $NUM_ENTRIES -gt 0 ]];
  then
    INFERENCE_USE=$( echo "$INFERENCE_USE $NUM_ENTRIES" | awk '{sum=$1 / $2;} END{print sum;}' )
    VIDEO_USE=$( echo "$VIDEO_USE $NUM_ENTRIES" | awk '{sum=$1 / $2;} END{print sum;}' )
    echo "$VIDEO_USE $INFERENCE_USE"
  else
    echo "$VIDEO_USE $INFERENCE_USE"
  fi
  rm tmp_${CARD}.txt
}

trap end_measuring_gpu SIGINT SIGTERM

# wait 5 seconds while pipeline is setup and reaches stable state to avoid "false" gpu usage measurements during initalization
sleep 5
start_measuring_gpu

# test runs for 40sec, monitor for 30sec to collect statictically significant data.
sleep 30
end_measuring_gpu
exit 0
